	/**
	 * 获取棋型库。 棋型库每一种棋型都包含三个数据：第一个数据是棋型，1表示棋子，0表示空位置，例如"11101"；第二个数据是此棋型的评分，
	 * 计算机根据评分来判断要优先破解哪种棋型
	 * ；第三个值是破解该棋型的位置，此位置是此棋型字符串的索引位置，例如"11101"的破解位置为3，就是在0的位置下子
	 * 。所有的棋型都指一行中出现的棋型，只能判断较为简单的棋型，不能判断复杂的多行复合棋型。
	 * 
	 * @return 返回棋型匹配库，根据棋型估值降序排列
	 */
	private Object[][] getModelLibrary() {
		// 棋型库数组，第一列保存棋型字符串，第二列保存棋型估值,第三列保存针对此棋型的下法
		Object[][] library = new Object[28][3];
		// 一行可能出现的棋型，1表示棋子，0表示空位置
		String livefour = "011110";// 活四棋型
		String deadfour1a = "01111";// 死四棋型1
		String deadfour1b = "11110";
		String deadfour2a = "11101";// 死四棋型2
		String deadfour2b = "10111";
		String deadfour3 = "11011";// 死四棋型3
		String livethree = "01110";// 活三棋型
		String deadthree1a = "11100";// 死三棋型1
		String deadthree1b = "00111";
		String deadthree2a = "01011";// 死三棋型2
		String deadthree2b = "10110";
		String deadthree2c = "01101";
		String deadthree2d = "11010";
		String deadthree3a = "10011";// 死三棋型3
		String deadthree3b = "11001";
		String deadthree4 = "10101";// 死三棋型4
		String livetwo = "00011000";// 活二棋型
		String deadtwo1a = "11000";// 死二棋型1
		String deadtwo1b = "01100";
		String deadtwo1c = "00110";
		String deadtwo1d = "00011";
		String deadtwo2a = "00101";// 死二棋型2
		String deadtwo2b = "10100";
		String deadtwo2c = "01010";
		String deadtwo3a = "01001";// 死二棋型3
		String deadtwo3b = "10010";
		String deadone1 = "00001";// 死一棋型
		String deadone2 = "10000";
		library[0][0] = livefour;// 棋型放入数组中
		library[0][1] = 100000;// 此棋型产生的威胁值（或优势值）
		library[0][2] = 0;// 在此棋型0索引出下子可破解
		library[1][0] = deadfour1a;
		library[1][1] = 2500;
		library[1][2] = 0;
		library[2][0] = deadfour1b;
		library[2][1] = 2500;
		library[2][2] = 4;
		library[3][0] = deadfour2a;
		library[3][1] = 3300;
		library[3][2] = 3;
		library[4][0] = deadfour2b;
		library[4][1] = 3300;
		library[4][2] = 1;
		library[5][0] = deadfour3;
		library[5][1] = 2600;
		library[5][2] = 2;
		library[6][0] = livethree;
		library[6][1] = 3000;
		library[6][2] = 0;
		library[7][0] = deadthree1a;
		library[7][1] = 500;
		library[7][2] = 3;
		library[8][0] = deadthree1b;
		library[8][1] = 500;
		library[8][2] = 1;
		library[9][0] = deadthree2a;
		library[9][1] = 800;
		library[9][2] = 2;
		library[10][0] = deadthree2b;
		library[10][1] = 800;
		library[10][2] = 1;
		library[11][0] = deadthree2c;
		library[11][1] = 800;
		library[11][2] = 3;
		library[12][0] = deadthree2d;
		library[12][1] = 800;
		library[12][2] = 2;
		library[13][0] = deadthree3a;
		library[13][1] = 600;
		library[13][2] = 2;
		library[14][0] = deadthree3b;
		library[14][1] = 600;
		library[14][2] = 2;
		library[15][0] = deadthree4;
		library[15][1] = 550;
		library[15][2] = 1;
		library[16][0] = livetwo;
		library[16][1] = 650;
		library[16][2] = 2;
		library[17][0] = deadtwo1a;
		library[17][1] = 150;
		library[17][2] = 2;
		library[18][0] = deadtwo1b;
		library[18][1] = 150;
		library[18][2] = 3;
		library[19][0] = deadtwo1c;
		library[19][1] = 150;
		library[19][2] = 1;
		library[20][0] = deadtwo1d;
		library[20][1] = 150;
		library[20][2] = 2;
		library[21][0] = deadtwo2a;
		library[21][1] = 250;
		library[21][2] = 1;
		library[22][0] = deadtwo2b;
		library[22][1] = 250;
		library[22][2] = 3;
		library[23][0] = deadtwo2c;
		library[23][1] = 250;
		library[23][2] = 2;
		library[24][0] = deadtwo3a;
		library[24][1] = 200;
		library[24][2] = 2;
		library[25][0] = deadtwo3b;
		library[25][1] = 200;
		library[25][2] = 2;
		library[26][0] = deadone1;
		library[26][1] = 100;
		library[26][2] = 3;
		library[27][0] = deadone2;
		library[27][1] = 100;
		library[27][2] = 1;

		/*----- 将棋型库数组按照棋型估值（威胁值或优势值）升序排列，确保最后判断最有威胁的棋型---- */
		int index;// 快速排序索引标记
		for (int i = 1; i < library.length; i++) {// 遍历数组行
			index = 0;// 索引标记归0
			for (int j = 1; j <= library.length - i; j++) {// 遍历数组列
				int valueA = (int) library[j][1];// 记录当前行的估值
				int valueB = (int) library[index][1];// 记录索引行的估值
				if (valueA > valueB) {// 如果当前行比索引行评分高
					index = j;// 将当前航记录为索引行
				}
			}
			// 将评分最大的行放到数组的最末尾
			// 交换估值
			Object value = library[library.length - i][1]; // 把第一个元素值保存到临时变量中
			library[library.length - i][1] = library[index][1]; // 把第二个元素值保存到第一个元素单元中
			library[index][1] = value; // 把临时变量也就是第一个元素原值保存到第二个元素中
			// 交换棋型
			Object key = library[library.length - i][0];
			library[library.length - i][0] = library[index][0];
			library[index][0] = key;
			// 交换破解位置
			Object step = library[library.length - i][2];
			library[library.length - i][2] = library[index][2];
			library[index][2] = step;
		}
		/*------------------------快速排序完毕-----------------*/
		return library;
	}
