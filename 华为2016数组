/*有一个数组a[N]顺序存放0~N-1，要求每隔两个数删掉一个数，到末尾时循环至开头继续进行，求最后一个被删掉的数的原始下标位置。以8个数(N=7)为例:｛0，1，2，3，4，5，6，7｝，0->1->2(删除)->3->4->5(删除)->6->7->0(删除),如此循环直到最后一个数被删除。

输入描述:
每组数据为一行一个整数n(小于等于1000)，为数组成员数,如果大于1000，则对a[999]进行计算。

输出描述:
一行输出最后一个被删掉的数的原始下标位置。

输入例子1:
8

输出例子1:
6*/
import java.util.*;
public class test27 {
public static void main(String[] args) {
	Scanner sc=new Scanner(System.in);
	while(sc.hasNext()){
		int n=sc.nextInt();
		if(n>1000)
			n=1000;
	LNode head=new LNode();
	head.next=null;
	LNode tmp=null;
	LNode cur=head;
	for(int i=0;i<n;i++)
	{
		tmp=new LNode ();
		tmp.data=i;
		tmp.next=null;
		cur.next=tmp;
		cur=tmp;
		
	}
	cur.next=head.next;
	//System.out.println(cur.next.data);
	delete(head);
	
	
}
}
public static void delete(LNode head)
{
	
	LNode cur=head.next;
	LNode next=cur.next;
	LNode pre=head;
	while(cur.next!=null){
		pre=cur.next;
		cur=pre.next;		
		next=cur.next;		
		cur.next=null;
		pre.next=next;
		cur=next;	
		if(cur.data==cur.next.data)
			break;
	}
	System.out.println(cur.data);
	
}

}
class LNode
{
	int data;
	LNode next;

}
